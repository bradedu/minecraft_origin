From 0c53a5706793ac4fc60c0ae0664d0db6f16cec6c Mon Sep 17 00:00:00 2001
From: Geoff Crossland <gcrossland+bukkit@gmail.com>
Date: Fri, 11 Aug 2017 19:23:58 +0100
Subject: [PATCH] Make unloaded chunk saving more asynchronous


diff --git a/src/main/java/net/minecraft/server/ChunkProviderServer.java b/src/main/java/net/minecraft/server/ChunkProviderServer.java
index 4bfaaac93..a8cdcb7da 100644
--- a/src/main/java/net/minecraft/server/ChunkProviderServer.java
+++ b/src/main/java/net/minecraft/server/ChunkProviderServer.java
@@ -205,10 +205,10 @@ public class ChunkProviderServer implements IChunkProvider {
         return chunk;
     }
 
-    public void saveChunk(IChunkAccess ichunkaccess) {
+    public void saveChunk(IChunkAccess ichunkaccess, boolean unloaded) { // Spigot
         try {
             ichunkaccess.setLastSaved(this.world.getTime());
-            this.chunkLoader.saveChunk(this.world, ichunkaccess);
+            this.chunkLoader.saveChunk(this.world, ichunkaccess, unloaded); // Spigot
         } catch (IOException ioexception) {
             ChunkProviderServer.a.error("Couldn't save chunk", ioexception);
         } catch (ExceptionWorldConflict exceptionworldconflict) {
@@ -232,7 +232,7 @@ public class ChunkProviderServer implements IChunkProvider {
                 Chunk chunk = (Chunk) objectiterator.next();
 
                 if (chunk.c(flag)) {
-                    this.saveChunk(chunk);
+                    this.saveChunk(chunk, false); // Spigot
                     chunk.a(false);
                     ++i;
                     if (i == 24 && !flag && false) { // Spigot
@@ -333,7 +333,7 @@ public class ChunkProviderServer implements IChunkProvider {
         synchronized (this.chunkLoader) {
             chunk.removeEntities();
             if (save) {
-                this.saveChunk(chunk);
+                this.saveChunk(chunk, true); // Spigot
             }
             this.chunks.remove(chunk.chunkKey);
             this.lastChunk = null;
diff --git a/src/main/java/net/minecraft/server/ChunkRegionLoader.java b/src/main/java/net/minecraft/server/ChunkRegionLoader.java
index f86358754..8e5ce6c18 100644
--- a/src/main/java/net/minecraft/server/ChunkRegionLoader.java
+++ b/src/main/java/net/minecraft/server/ChunkRegionLoader.java
@@ -21,16 +21,21 @@ import java.util.function.Function;
 import javax.annotation.Nullable;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+// Spigot start
+import java.util.function.Supplier;
+import org.spigotmc.SupplierUtils;
+// Spigot end
 
 public class ChunkRegionLoader implements IChunkLoader, IAsyncChunkSaver {
 
     private static final Logger a = LogManager.getLogger();
-    private final Map<ChunkCoordIntPair, NBTTagCompound> b = Maps.newHashMap();
+    private final Map<ChunkCoordIntPair, Supplier<NBTTagCompound>> b = Maps.newHashMap();
     private final File c;
     private final DataFixer d;
     private PersistentStructureLegacy e;
     // private boolean f; // CraftBukkit
     public final LongSet blacklist = new LongOpenHashSet();
+    private static final double SAVE_QUEUE_TARGET_SIZE = 625; // Spigot
 
     public ChunkRegionLoader(File file, DataFixer datafixer) {
         this.c = file;
@@ -80,7 +85,7 @@ public class ChunkRegionLoader implements IChunkLoader, IAsyncChunkSaver {
             return null;
         }
         // CraftBukkit end
-        NBTTagCompound nbttagcompound = (NBTTagCompound) this.b.get(new ChunkCoordIntPair(i, j));
+        NBTTagCompound nbttagcompound = SupplierUtils.getIfExists(this.b.get(new ChunkCoordIntPair(i, j))); // Spigot
 
         if (nbttagcompound != null) {
             return nbttagcompound;
@@ -114,7 +119,7 @@ public class ChunkRegionLoader implements IChunkLoader, IAsyncChunkSaver {
                 nbttagcompound1 = GameProfileSerializer.a(this.d, DataFixTypes.CHUNK, nbttagcompound1, Math.max(1493, k));
                 if (k < 1631) {
                     nbttagcompound1.setInt("DataVersion", 1631);
-                    this.a(new ChunkCoordIntPair(i, j), nbttagcompound1);
+                    this.a(new ChunkCoordIntPair(i, j), new SupplierUtils.ValueSupplier<>(nbttagcompound1)); // Spigot
                 }
 
                 return nbttagcompound1;
@@ -263,7 +268,13 @@ public class ChunkRegionLoader implements IChunkLoader, IAsyncChunkSaver {
         }
     }
 
+    // Spigot start
     public void saveChunk(World world, IChunkAccess ichunkaccess) throws IOException, ExceptionWorldConflict {
+        saveChunk(world, ichunkaccess, false); // Ideally we shouldn't use this, but easier than decompile errors
+    }
+
+    public void saveChunk(World world, IChunkAccess ichunkaccess, boolean unloaded) throws IOException, ExceptionWorldConflict {
+        // Spigot end
         world.checkSession();
 
         try {
@@ -274,8 +285,19 @@ public class ChunkRegionLoader implements IChunkLoader, IAsyncChunkSaver {
             ChunkCoordIntPair chunkcoordintpair = ichunkaccess.getPos();
 
             nbttagcompound.set("Level", nbttagcompound1);
+            // Spigot start
+            Supplier<NBTTagCompound> completion;
+            final long worldTime = world.getTime();
+            final boolean worldHasSkyLight = world.worldProvider.g();
             if (ichunkaccess.i().d() == ChunkStatus.Type.LEVELCHUNK) {
-                this.saveBody((Chunk) ichunkaccess, world, nbttagcompound1);
+                final Chunk chunk = (Chunk) ichunkaccess;
+                saveEntities(nbttagcompound1, chunk, world);
+                completion = new Supplier<NBTTagCompound>() {
+                    public NBTTagCompound get() {
+                        saveBody(chunk, world, nbttagcompound1, worldTime, worldHasSkyLight);
+                        return nbttagcompound;
+                    }
+                };
             } else {
                 NBTTagCompound nbttagcompound2 = this.a(world, chunkcoordintpair.x, chunkcoordintpair.z);
 
@@ -283,17 +305,23 @@ public class ChunkRegionLoader implements IChunkLoader, IAsyncChunkSaver {
                     return;
                 }
 
-                this.a((ProtoChunk) ichunkaccess, world, nbttagcompound1);
+                completion = new Supplier<NBTTagCompound>() {
+                    public NBTTagCompound get() {
+                        a((ProtoChunk) ichunkaccess, world, nbttagcompound1, worldTime, worldHasSkyLight);
+                        return nbttagcompound;
+                    }
+                };
             }
 
-            this.a(chunkcoordintpair, nbttagcompound);
+            this.a(chunkcoordintpair, SupplierUtils.createUnivaluedSupplier(completion, unloaded && this.b.size() < SAVE_QUEUE_TARGET_SIZE));
+            // Spigot end
         } catch (Exception exception) {
             ChunkRegionLoader.a.error("Failed to save chunk", exception);
         }
 
     }
 
-    protected void a(ChunkCoordIntPair chunkcoordintpair, NBTTagCompound nbttagcompound) {
+    protected void a(ChunkCoordIntPair chunkcoordintpair, Supplier<NBTTagCompound> nbttagcompound) { // Spigot
         this.b.put(chunkcoordintpair, nbttagcompound);
         FileIOThread.a().a(this);
     }
@@ -304,7 +332,7 @@ public class ChunkRegionLoader implements IChunkLoader, IAsyncChunkSaver {
     }
 
     private boolean processSaveQueueEntry(boolean logCompletion) {
-        Iterator<Entry<ChunkCoordIntPair, NBTTagCompound>> iterator = this.b.entrySet().iterator();
+        Iterator<Entry<ChunkCoordIntPair, Supplier<NBTTagCompound>>> iterator = this.b.entrySet().iterator(); // Spigot
 
         if (!iterator.hasNext()) {
             if (logCompletion) { // CraftBukkit
@@ -317,14 +345,14 @@ public class ChunkRegionLoader implements IChunkLoader, IAsyncChunkSaver {
 
             iterator.remove();
             ChunkCoordIntPair chunkcoordintpair = (ChunkCoordIntPair) entry.getKey();
-            NBTTagCompound nbttagcompound = (NBTTagCompound) entry.getValue();
+            Supplier<NBTTagCompound> nbttagcompound = (Supplier<NBTTagCompound>) entry.getValue(); // Spigot
 
             if (nbttagcompound == null) {
                 return true;
             } else {
                 try {
                     // CraftBukkit start
-                    RegionFileCache.write(this.c, chunkcoordintpair.x, chunkcoordintpair.z, nbttagcompound);
+                    RegionFileCache.write(this.c, chunkcoordintpair.x, chunkcoordintpair.z, SupplierUtils.getIfExists(nbttagcompound)); // Spigot
 
                     /*
                     NBTCompressedStreamTools.a(nbttagcompound, (DataOutput) dataoutputstream);
@@ -371,13 +399,13 @@ public class ChunkRegionLoader implements IChunkLoader, IAsyncChunkSaver {
 
     }
 
-    private void a(ProtoChunk protochunk, World world, NBTTagCompound nbttagcompound) {
+    private void a(ProtoChunk protochunk, World world, NBTTagCompound nbttagcompound, long worldTime, boolean worldHasSkyLight) { // Spigot
         int i = protochunk.getPos().x;
         int j = protochunk.getPos().z;
 
         nbttagcompound.setInt("xPos", i);
         nbttagcompound.setInt("zPos", j);
-        nbttagcompound.setLong("LastUpdate", world.getTime());
+        nbttagcompound.setLong("LastUpdate", worldTime); // Spigot
         nbttagcompound.setLong("InhabitedTime", protochunk.m());
         nbttagcompound.setString("Status", protochunk.i().b());
         ChunkConverter chunkconverter = protochunk.v();
@@ -387,7 +415,7 @@ public class ChunkRegionLoader implements IChunkLoader, IAsyncChunkSaver {
         }
 
         ChunkSection[] achunksection = protochunk.getSections();
-        NBTTagList nbttaglist = this.a(world, achunksection);
+        NBTTagList nbttaglist = this.a(world, achunksection, worldHasSkyLight); // Spigot
 
         nbttagcompound.set("Sections", nbttaglist);
         BiomeBase[] abiomebase = protochunk.getBiomeIndex();
@@ -457,10 +485,10 @@ public class ChunkRegionLoader implements IChunkLoader, IAsyncChunkSaver {
         nbttagcompound.set("Structures", this.a(i, j, protochunk.e(), protochunk.f()));
     }
 
-    private void saveBody(Chunk chunk, World world, NBTTagCompound nbttagcompound) {
+    private void saveBody(Chunk chunk, World world, NBTTagCompound nbttagcompound, long worldTime, boolean worldHasSkyLight) { // Spigot
         nbttagcompound.setInt("xPos", chunk.locX);
         nbttagcompound.setInt("zPos", chunk.locZ);
-        nbttagcompound.setLong("LastUpdate", world.getTime());
+        nbttagcompound.setLong("LastUpdate", worldTime); // Spigot
         nbttagcompound.setLong("InhabitedTime", chunk.m());
         nbttagcompound.setString("Status", chunk.i().b());
         ChunkConverter chunkconverter = chunk.F();
@@ -470,7 +498,7 @@ public class ChunkRegionLoader implements IChunkLoader, IAsyncChunkSaver {
         }
 
         ChunkSection[] achunksection = chunk.getSections();
-        NBTTagList nbttaglist = this.a(world, achunksection);
+        NBTTagList nbttaglist = this.a(world, achunksection, worldHasSkyLight); // Spigot
 
         nbttagcompound.set("Sections", nbttaglist);
         BiomeBase[] abiomebase = chunk.getBiomeIndex();
@@ -481,6 +509,12 @@ public class ChunkRegionLoader implements IChunkLoader, IAsyncChunkSaver {
         }
 
         nbttagcompound.setIntArray("Biomes", aint);
+
+        // Spigot start - End this method here and split off entity saving to another method
+    }
+
+    private void saveEntities(NBTTagCompound nbttagcompound, Chunk chunk, World world) {
+        // Spigot end
         chunk.f(false);
         NBTTagList nbttaglist1 = new NBTTagList();
 
@@ -771,9 +805,9 @@ public class ChunkRegionLoader implements IChunkLoader, IAsyncChunkSaver {
         return protochunk;
     }
 
-    private NBTTagList a(World world, ChunkSection[] achunksection) {
+    private NBTTagList a(World world, ChunkSection[] achunksection, boolean worldHasSkyLight) { // Spigot
         NBTTagList nbttaglist = new NBTTagList();
-        boolean flag = world.worldProvider.g();
+        boolean flag = worldHasSkyLight; // Spigot
         ChunkSection[] achunksection1 = achunksection;
         int i = achunksection.length;
 
diff --git a/src/main/java/net/minecraft/server/IChunkLoader.java b/src/main/java/net/minecraft/server/IChunkLoader.java
index a53ce424d..4698ee99f 100644
--- a/src/main/java/net/minecraft/server/IChunkLoader.java
+++ b/src/main/java/net/minecraft/server/IChunkLoader.java
@@ -14,5 +14,7 @@ public interface IChunkLoader {
 
     void saveChunk(World world, IChunkAccess ichunkaccess) throws IOException, ExceptionWorldConflict;
 
+    void saveChunk(World world, IChunkAccess ichunkaccess, boolean unloaded) throws IOException, ExceptionWorldConflict; // Spigot
+
     void b();
 }
diff --git a/src/main/java/org/spigotmc/SupplierUtils.java b/src/main/java/org/spigotmc/SupplierUtils.java
new file mode 100644
index 000000000..f63ce98bf
--- /dev/null
+++ b/src/main/java/org/spigotmc/SupplierUtils.java
@@ -0,0 +1,69 @@
+package org.spigotmc;
+
+import java.util.function.Supplier;
+import javax.annotation.Nullable;
+
+/**
+ * Utilities for creating and working with {@code Supplier} instances.
+ */
+public class SupplierUtils {
+
+    /**
+     * Repeatedly supplies the first value from a given sequence; the value is
+     * obtained only when required.
+     */
+    public static class LazyHeadSupplier<V> implements Supplier<V> {
+
+        private @Nullable Supplier<V> completion;
+        private @Nullable V value;
+
+        public LazyHeadSupplier(Supplier<V> completion) {
+            this.completion = completion;
+        }
+
+        public synchronized @Nullable V get() {
+            if (this.completion != null) {
+                this.value = this.completion.get();
+                this.completion = null;
+            }
+
+            return this.value;
+        }
+    }
+
+    /**
+     * Repeatedly supplies the given value.
+     */
+    public static class ValueSupplier<V> implements Supplier<V> {
+
+        private final @Nullable V value;
+
+        public ValueSupplier(@Nullable V value) {
+            this.value = value;
+        }
+
+        public @Nullable V get() {
+            return this.value;
+        }
+    }
+
+    /**
+     * Creates a new {@code Supplier} that supplies the given {@code Supplier}'s
+     * first value.
+     *
+     * @param doLazily {@code false}, if {@code completion.get()} should be
+     * called immediately, or {@code true}, if {@code completion.get()} should
+     * be called only when the value is first needed.
+     */
+    public static <V> Supplier<V> createUnivaluedSupplier(Supplier<V> completion, boolean doLazily) {
+        return doLazily ? new LazyHeadSupplier<V>(completion) : new ValueSupplier<V>(completion.get());
+    }
+
+    /**
+     * Returns {@code supplier.get()}, if {@code supplier} is non-{@code null}
+     * (or {@code null}, otherwise).
+     */
+    public static @Nullable <V> V getIfExists(@Nullable Supplier<V> supplier) {
+        return supplier != null ? supplier.get() : null;
+    }
+}
-- 
2.19.1

