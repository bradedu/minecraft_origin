From 01f85a730b02088cbfd01648e80a709065d8a3af Mon Sep 17 00:00:00 2001
From: Thinkofdeath <thethinkofdeath@gmail.com>
Date: Tue, 7 Jan 2014 15:56:26 +0000
Subject: [PATCH] Allow statistics to be disabled/forced


diff --git a/src/main/java/net/minecraft/server/ServerStatisticManager.java b/src/main/java/net/minecraft/server/ServerStatisticManager.java
index 565329a05..d622983b2 100644
--- a/src/main/java/net/minecraft/server/ServerStatisticManager.java
+++ b/src/main/java/net/minecraft/server/ServerStatisticManager.java
@@ -36,6 +36,13 @@ public class ServerStatisticManager extends StatisticManager {
     public ServerStatisticManager(MinecraftServer minecraftserver, File file) {
         this.c = minecraftserver;
         this.d = file;
+        // Spigot start
+        for ( Map.Entry<MinecraftKey, Integer> entry : org.spigotmc.SpigotConfig.forcedStats.entrySet() )
+        {
+            Statistic<MinecraftKey> wrapper = StatisticList.CUSTOM.b( entry.getKey() );
+            this.a.put( wrapper, entry.getValue().intValue() );
+        }
+        // Spigot end
         if (file.isFile()) {
             try {
                 this.a(minecraftserver.az(), FileUtils.readFileToString(file));
@@ -49,6 +56,7 @@ public class ServerStatisticManager extends StatisticManager {
     }
 
     public void a() {
+        if ( org.spigotmc.SpigotConfig.disableStatSaving ) return; // Spigot
         try {
             FileUtils.writeStringToFile(this.d, this.b());
         } catch (IOException ioexception) {
@@ -58,6 +66,7 @@ public class ServerStatisticManager extends StatisticManager {
     }
 
     public void setStatistic(EntityHuman entityhuman, Statistic<?> statistic, int i) {
+        if ( org.spigotmc.SpigotConfig.disableStatSaving ) return; // Spigot
         super.setStatistic(entityhuman, statistic, i);
         this.e.add(statistic);
     }
diff --git a/src/main/java/org/spigotmc/SpigotConfig.java b/src/main/java/org/spigotmc/SpigotConfig.java
index 33f0e3b87..f814e19e8 100644
--- a/src/main/java/org/spigotmc/SpigotConfig.java
+++ b/src/main/java/org/spigotmc/SpigotConfig.java
@@ -10,10 +10,13 @@ import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 import java.util.logging.Level;
+import net.minecraft.server.IRegistry;
+import net.minecraft.server.MinecraftKey;
 import net.minecraft.server.MinecraftServer;
 import org.bukkit.Bukkit;
 import org.bukkit.ChatColor;
 import org.bukkit.command.Command;
+import org.bukkit.configuration.ConfigurationSection;
 import org.bukkit.configuration.InvalidConfigurationException;
 import org.bukkit.configuration.file.YamlConfiguration;
 
@@ -236,4 +239,36 @@ public class SpigotConfig
     private static void lateBind() {
         lateBind = getBoolean( "settings.late-bind", false );
     }
+
+    public static boolean disableStatSaving;
+    public static Map<MinecraftKey, Integer> forcedStats = new HashMap<>();
+    private static void stats()
+    {
+        disableStatSaving = getBoolean( "stats.disable-saving", false );
+
+        if ( !config.contains( "stats.forced-stats" ) ) {
+            config.createSection( "stats.forced-stats" );
+        }
+
+        ConfigurationSection section = config.getConfigurationSection( "stats.forced-stats" );
+        for ( String name : section.getKeys( true ) )
+        {
+            if ( section.isInt( name ) )
+            {
+                try
+                {
+                    MinecraftKey key = new MinecraftKey( name );
+                    if ( IRegistry.CUSTOM_STAT.get( key ) == null )
+                    {
+                        Bukkit.getLogger().log(Level.WARNING, "Ignoring non existent stats.forced-stats " + name);
+                        continue;
+                    }
+                    forcedStats.put( key, section.getInt( name ) );
+                } catch (Exception ex)
+                {
+                    Bukkit.getLogger().log(Level.WARNING, "Ignoring invalid stats.forced-stats " + name);
+                }
+            }
+        }
+    }
 }
-- 
2.19.1

